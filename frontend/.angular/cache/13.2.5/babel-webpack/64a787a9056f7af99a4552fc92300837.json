{"ast":null,"code":"import { EventEmitter, VERSION, Component, Renderer2, ElementRef, Inject, PLATFORM_ID, Output, Input, NgModule } from '@angular/core';\nimport uploadcare from 'uploadcare-widget';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\n;\nconst versions = {\n  version: '3.0.2',\n  name: 'ngx-uploadcare-widget',\n  versionDate: '2022-02-22T10:00:56.543Z',\n  description: 'Angular 2+ wrapper for Uploadcare Widget'\n};\nconst APP_VERSION = versions.version;\n/* eslint-disable no-underscore-dangle */\n\nlet UcWidgetComponent = /*#__PURE__*/(() => {\n  class UcWidgetComponent {\n    constructor(renderer, element, platformId) {\n      this.onUploadComplete = new EventEmitter();\n      this.onChange = new EventEmitter();\n      this.onProgress = new EventEmitter();\n      this._publicKey = 'demopublickey';\n      this._value = null;\n      this._cdnBase = null;\n      this._reinitRequired = false;\n      this._isClearValue = false;\n      this._validators = [];\n      this.element = element;\n      this.renderer = renderer;\n      this.isInBrowser = isPlatformBrowser(platformId);\n\n      if (this.isInBrowser) {\n        uploadcare.start({\n          integration: `Angular/${VERSION.full}; Ngx-Uploadcare-Widget/${APP_VERSION}`\n        });\n      }\n    }\n\n    set publicKey(publicKey) {\n      this._publicKey = publicKey;\n      this.setReinitFlag(true);\n    }\n\n    get publicKey() {\n      return this._publicKey;\n    }\n\n    set multiple(multiple) {\n      this._multiple = multiple;\n      this.setReinitFlag(true);\n    }\n\n    get multiple() {\n      return this._multiple;\n    }\n\n    set multipleMax(multipleMax) {\n      this._multipleMax = multipleMax;\n      this.setReinitFlag(false);\n    }\n\n    get multipleMax() {\n      return this._multipleMax;\n    }\n\n    set multipleMin(multipleMin) {\n      this._multipleMin = multipleMin;\n      this.setReinitFlag(false);\n    }\n\n    get multipleMin() {\n      return this._multipleMin;\n    }\n\n    set imagesOnly(imagesOnly) {\n      this._imagesOnly = imagesOnly;\n      this.setReinitFlag(false);\n    }\n\n    get imagesOnly() {\n      return this._imagesOnly;\n    }\n\n    set previewStep(previewStep) {\n      this._previewStep = previewStep;\n      this.setReinitFlag(false);\n    }\n\n    get previewStep() {\n      return this._previewStep;\n    }\n\n    set crop(crop) {\n      this._crop = crop;\n      this.setReinitFlag(false);\n    }\n\n    get crop() {\n      return this._crop;\n    }\n\n    set imageShrink(imageShrink) {\n      this._imageShrink = imageShrink;\n      this.setReinitFlag(false);\n    }\n\n    get imageShrink() {\n      return this._imageShrink;\n    }\n\n    set clearable(clearable) {\n      this._clearable = clearable;\n      this.setReinitFlag(false);\n    }\n\n    get clearable() {\n      return this._clearable;\n    }\n\n    set tabs(tabs) {\n      this._tabs = tabs;\n      this.setReinitFlag(false);\n    }\n\n    get tabs() {\n      return this._tabs;\n    }\n\n    set inputAcceptTypes(inputAcceptTypes) {\n      this._inputAcceptTypes = inputAcceptTypes;\n      this.setReinitFlag(false);\n    }\n\n    get inputAcceptTypes() {\n      return this._inputAcceptTypes;\n    }\n\n    set preferredTypes(preferredTypes) {\n      this._preferredTypes = preferredTypes;\n      this.setReinitFlag(false);\n    }\n\n    get preferredTypes() {\n      return this._preferredTypes;\n    }\n\n    set systemDialog(systemDialog) {\n      this._systemDialog = systemDialog;\n      this.setReinitFlag(false);\n    }\n\n    get systemDialog() {\n      return this._systemDialog;\n    }\n\n    set secureSignature(secureSignature) {\n      this._secureSignature = secureSignature;\n      this.setReinitFlag(true);\n    }\n\n    get secureSignature() {\n      return this._secureSignature;\n    }\n\n    set secureExpire(secureExpire) {\n      this._secureExpire = secureExpire;\n      this.setReinitFlag(false);\n    }\n\n    get secureExpire() {\n      return this._secureExpire;\n    }\n\n    set value(value) {\n      this._value = value;\n\n      if (this.widget) {\n        this.setReinitFlag(false);\n        this.widget.value(value);\n      }\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set validators(validatorsArr) {\n      this._validators = validatorsArr;\n      this.setReinitFlag(false);\n    }\n\n    get validators() {\n      return this._validators;\n    }\n\n    set cdnBase(cdnBase) {\n      this._cdnBase = cdnBase;\n      this.setReinitFlag(true);\n    }\n\n    get cdnBase() {\n      return this._cdnBase;\n    }\n\n    set doNotStore(doNotStore) {\n      this._doNotStore = doNotStore;\n      this.setReinitFlag(false);\n    }\n\n    get doNotStore() {\n      return this._doNotStore;\n    }\n\n    ngAfterViewInit() {\n      if (this.isInBrowser) {\n        this.widget = this.init();\n      }\n    }\n\n    ngAfterViewChecked() {\n      if (this._reinitRequired) {\n        this.reset(this._isClearValue);\n      }\n    }\n\n    reset(clearUploads = false) {\n      this.destroy();\n      this.widget = this.init(clearUploads);\n      this._reinitRequired = false;\n      this._isClearValue = false;\n    }\n\n    clearUploads() {\n      this._value = null;\n\n      if (this.widget) {\n        this.widget.value(null);\n      }\n    }\n\n    openDialog() {\n      if (this.widget) {\n        this.dialog = this.widget.openDialog();\n      }\n    }\n\n    reject() {\n      if (this.dialog) {\n        this.dialog.reject();\n        this.dialog = null;\n      }\n    }\n\n    setReinitFlag(isClearValue) {\n      if (this.widget) {\n        this._reinitRequired = true;\n        this._isClearValue = isClearValue;\n      }\n    }\n\n    setInputAttr(key, value) {\n      if (value) {\n        this.renderer.setAttribute(this.inputElement, key, value);\n      }\n    }\n\n    initInputElement() {\n      this.setInputAttr('type', 'hidden');\n      this.setInputAttr('data-public-key', this._publicKey);\n      this.setInputAttr('data-multiple', this._multiple);\n      this.setInputAttr('data-multiple-max', this._multipleMax);\n      this.setInputAttr('data-multiple-min', this._multipleMin);\n      this.setInputAttr('data-images-only', this._imagesOnly);\n      this.setInputAttr('data-preview-step', this._previewStep);\n      this.setInputAttr('data-crop', this._crop);\n      this.setInputAttr('data-image-shrink', this._imageShrink);\n      this.setInputAttr('data-clearable', this._clearable);\n      this.setInputAttr('data-tabs', this._tabs);\n      this.setInputAttr('data-input-accept-types', this._inputAcceptTypes);\n      this.setInputAttr('data-preferred-types', this._preferredTypes);\n      this.setInputAttr('data-system-dialog', this._systemDialog);\n      this.setInputAttr('data-secure-signature', this._secureSignature);\n      this.setInputAttr('data-secure-expire', this._secureExpire);\n      this.setInputAttr('data-cdn-base', this._cdnBase);\n      this.setInputAttr('data-do-not-store', this._doNotStore);\n\n      if (this._value) {\n        this.renderer.setProperty(this.inputElement, 'value', this._value);\n      }\n    }\n\n    init(removeUploads = false) {\n      this.inputElement = this.renderer.createElement('input');\n      this.renderer.appendChild(this.element.nativeElement, this.inputElement);\n\n      if (removeUploads) {\n        this.clearUploads();\n      }\n\n      this.initInputElement();\n      const widget = uploadcare.Widget(this.inputElement);\n\n      this._validators.forEach(v => {\n        if (typeof v === 'function') {\n          widget.validators.push(v);\n        } else {\n          throw new Error('Only functions allowed in validadators array');\n        }\n      });\n\n      widget.onUploadComplete(fileInfo => {\n        this.onUploadComplete.emit(fileInfo);\n        this._value = fileInfo.uuid;\n      });\n      widget.onChange(selectionPromise => {\n        this.onChange.emit(selectionPromise);\n\n        if (!selectionPromise) {\n          return;\n        }\n\n        if (typeof selectionPromise.promise === 'function') {\n          selectionPromise.promise().progress(progress => {\n            this.onProgress.emit(progress);\n          });\n        } else {\n          selectionPromise.progress(progress => {\n            this.onProgress.emit(progress);\n          });\n        }\n      });\n      widget.onDialogOpen(dialogApi => {\n        this.dialog = dialogApi;\n      });\n      return widget;\n    }\n\n    destroy() {\n      const $ = uploadcare.jQuery;\n      $(this.widget.inputElement.nextSibling).remove();\n      $(this.widget.inputElement).clone().appendTo($(this.element.nativeElement));\n      $(this.widget.inputElement).remove();\n      this.renderer.removeChild(this.element.nativeElement, this.element.nativeElement.children[0]);\n      delete this.widget;\n    }\n\n  }\n\n  UcWidgetComponent.ɵfac = function UcWidgetComponent_Factory(t) {\n    return new (t || UcWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  UcWidgetComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: UcWidgetComponent,\n    selectors: [[\"ngx-uploadcare-widget\"]],\n    inputs: {\n      publicKey: [\"public-key\", \"publicKey\"],\n      multiple: \"multiple\",\n      multipleMax: [\"multiple-max\", \"multipleMax\"],\n      multipleMin: [\"multiple-min\", \"multipleMin\"],\n      imagesOnly: [\"images-only\", \"imagesOnly\"],\n      previewStep: [\"preview-step\", \"previewStep\"],\n      crop: \"crop\",\n      imageShrink: [\"image-shrink\", \"imageShrink\"],\n      clearable: \"clearable\",\n      tabs: \"tabs\",\n      inputAcceptTypes: [\"input-accept-types\", \"inputAcceptTypes\"],\n      preferredTypes: [\"preferred-types\", \"preferredTypes\"],\n      systemDialog: [\"system-dialog\", \"systemDialog\"],\n      secureSignature: [\"secure-signature\", \"secureSignature\"],\n      secureExpire: [\"secure-expire\", \"secureExpire\"],\n      value: \"value\",\n      validators: \"validators\",\n      cdnBase: [\"cdn-base\", \"cdnBase\"],\n      doNotStore: [\"do-not-store\", \"doNotStore\"]\n    },\n    outputs: {\n      onUploadComplete: \"on-upload-complete\",\n      onChange: \"on-change\",\n      onProgress: \"on-progress\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function UcWidgetComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return UcWidgetComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* eslint-disable @angular-eslint/no-output-rename, @angular-eslint/no-input-rename, @angular-eslint/no-output-on-prefix */\n\n\nlet UcWidgetCustomComponent = /*#__PURE__*/(() => {\n  class UcWidgetCustomComponent {\n    constructor(platformId) {\n      this.onUploadComplete = new EventEmitter();\n      this.onChange = new EventEmitter();\n      this.onProgress = new EventEmitter();\n      this.publicKey = 'demopublickey';\n      this.validators = [];\n      const isInBrowser = isPlatformBrowser(platformId);\n\n      if (isInBrowser) {\n        uploadcare.start({\n          integration: `Angular/${VERSION.full}; Ngx-Uploadcare-Widget/${APP_VERSION}`\n        });\n      }\n    }\n\n    openDialog() {\n      const config = {\n        publicKey: this.publicKey ? this.publicKey : undefined,\n        multiple: this.multiple,\n        multipleMax: this.multipleMax,\n        multipleMin: this.multipleMin,\n        imagesOnly: this.imagesOnly,\n        previewStep: this.previewStep,\n        crop: this.crop ? this.crop : undefined,\n        imageShrink: this.imageShrink ? this.imageShrink : undefined,\n        clearable: this.clearable,\n        tabs: this.tabs ? this.tabs : undefined,\n        inputAcceptTypes: this.inputAcceptTypes ? this.inputAcceptTypes : undefined,\n        preferredTypes: this.preferredTypes,\n        systemDialog: this.systemDialog,\n        secureSignature: this.secureSignature,\n        secureExpire: this.secureExpire,\n        value: this.value ? this.value : undefined,\n        cdnBase: this.cdnBase ? this.cdnBase : undefined,\n        doNotStore: this.doNotStore,\n        validators: this.validators.filter(v => {\n          if (typeof v !== 'function') {\n            throw new Error('Only functions allowed in validadators array');\n          }\n\n          return v;\n        })\n      };\n      this.dialog = uploadcare.openDialog(this.value, null, config);\n      this.dialog.done(selectionPromise => {\n        this.onChange.emit(selectionPromise);\n\n        if (typeof selectionPromise.promise === 'function') {\n          selectionPromise.promise().then(groupInfo => {\n            this.onUploadComplete.emit(groupInfo);\n          }).progress(progress => {\n            this.onProgress.emit(progress);\n          });\n        } else {\n          selectionPromise.then(fileInfo => {\n            this.onUploadComplete.emit(fileInfo);\n          }).progress(progress => {\n            this.onProgress.emit(progress);\n          });\n        }\n      });\n    }\n\n    reject() {\n      if (this.dialog) {\n        this.dialog.reject();\n        this.dialog = null;\n      }\n    }\n\n  }\n\n  UcWidgetCustomComponent.ɵfac = function UcWidgetCustomComponent_Factory(t) {\n    return new (t || UcWidgetCustomComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  UcWidgetCustomComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: UcWidgetCustomComponent,\n    selectors: [[\"ngx-uploadcare-widget-custom\"]],\n    inputs: {\n      publicKey: [\"public-key\", \"publicKey\"],\n      validators: \"validators\",\n      multiple: \"multiple\",\n      multipleMax: [\"multiple-max\", \"multipleMax\"],\n      multipleMin: [\"multiple-min\", \"multipleMin\"],\n      imagesOnly: [\"images-only\", \"imagesOnly\"],\n      previewStep: [\"preview-step\", \"previewStep\"],\n      crop: \"crop\",\n      imageShrink: [\"image-shrink\", \"imageShrink\"],\n      clearable: \"clearable\",\n      tabs: \"tabs\",\n      inputAcceptTypes: [\"input-accept-types\", \"inputAcceptTypes\"],\n      preferredTypes: [\"preferred-types\", \"preferredTypes\"],\n      systemDialog: [\"system-dialog\", \"systemDialog\"],\n      secureSignature: [\"secure-signature\", \"secureSignature\"],\n      secureExpire: [\"secure-expire\", \"secureExpire\"],\n      value: \"value\",\n      cdnBase: [\"cdn-base\", \"cdnBase\"],\n      doNotStore: [\"do-not-store\", \"doNotStore\"]\n    },\n    outputs: {\n      onUploadComplete: \"on-upload-complete\",\n      onChange: \"on-change\",\n      onProgress: \"on-progress\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function UcWidgetCustomComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return UcWidgetCustomComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet UcWidgetModule = /*#__PURE__*/(() => {\n  class UcWidgetModule {}\n\n  UcWidgetModule.ɵfac = function UcWidgetModule_Factory(t) {\n    return new (t || UcWidgetModule)();\n  };\n\n  UcWidgetModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: UcWidgetModule\n  });\n  UcWidgetModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [],\n    imports: [[]]\n  });\n  return UcWidgetModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UcWidgetModule, {\n    declarations: [UcWidgetCustomComponent, UcWidgetComponent],\n    exports: [UcWidgetCustomComponent, UcWidgetComponent]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { UcWidgetComponent, UcWidgetCustomComponent, UcWidgetModule }; //# sourceMappingURL=ngx-uploadcare-widget.js.map","map":null,"metadata":{},"sourceType":"module"}